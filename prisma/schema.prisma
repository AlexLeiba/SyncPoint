// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("NEXT_PUBLIC_DB_POSTGRESQL_URL")
}


// 
// model User {
//   id    Int     @id @default(autoincrement())
//   email String  @unique
//   name  String?
//   posts Post[]
// }
// 
// model Post {
//   id        Int     @id @default(autoincrement())
//   title     String
//   content   String?
//   published Boolean @default(false)
//   authorId  Int
//   author    User    @relation(fields: [authorId], references: [id])
// }


//CONTAIN DIFFERENT EVENT FOR PEOPL TO SCHEDULE, EACH EVENT HAS SCHEDULES ARRAY
model Event {
  id String @id @default(uuid())

  title String 
  description String?

  durationInMinutes Int

  userClerkId String
  userImage String
  userEmail String
  userFullName String

  isActive Boolean @default(true)
  meetings Meeting[] //bookings

  createdAt DateTime @default(now())
  updatedAt DateTime  @default(now())


}


// EACH SCHEDULE HAS EVENT ID (on which was created) AND SCHEDULE AVAILABILITIES ON THIS SCHEDULE table, PURPOSE: (sets up the timezone for user)
model Meeting {
  id String @id @default(uuid())
  eventId String @default(uuid())

  userClerkId String //owner of event
  userClerkEmail String //owner of event
  userClerkName String //owner of event

  bookedClerkId String //who booked a meeting

  name String
  email String
  additionalInfo String?

  startTime DateTime
  endTime DateTime

  meetLink String
  googleEventId String

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt




  // 
  // availability Availability[]

}


// EACH SCHEDULE AVAILABILITIES HAS ITS SCHEDULE ID, WHEN STARTS, WHEN ENDS, WITH DAY OF THE WEEK (shows which are the time slots available for EACH INDIVIDUAL DAY)
model Availability {
  id String @id @default(uuid())

  userClerkId String

  // meetingId String
  // meetings Meeting @relation(fields: [meetingId], references: [id],onDelete: Cascade) //this table will be deleted (schedule availability) if its Schedule id  is deleted ( so schedule wont exist anymore so the availability as well)
  timeGap Int

  // daysAvailableId String 


days DaysAvailable[]

  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt

}

model DaysAvailable {
  id             String       @id @default(uuid())
  availabilityId String       // foreign key
  day            DayOfWeek
  startTime      DateTime
  endTime        DateTime

  availability   Availability @relation(fields: [availabilityId], references: [id], onDelete: Cascade)
}
enum DayOfWeek {
MONDAY
TUESDAY
WEDNESDAY
THURSDAY
FRIDAY
SATURDAY
SUNDAY
}